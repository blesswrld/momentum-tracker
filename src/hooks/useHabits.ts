import { useState, useEffect, useRef, useMemo } from "react";
import { Habit } from "@/lib/types";
import { getTodayString } from "@/lib/utils";
import { toast } from "sonner";

interface UseHabitsProps {
    onHabitComplete: () => void;
}

type FilterStatus = "all" | "active" | "completed";

export function useHabits({ onHabitComplete }: UseHabitsProps) {
    const [habits, setHabits] = useState<Habit[]>([]);
    const [searchQuery, setSearchQuery] = useState("");
    const [filterStatus, setFilterStatus] = useState<FilterStatus>("all");
    const [visibleMonths, setVisibleMonths] = useState<{
        [key: number]: number;
    }>({});
    const isInitialLoad = useRef(true);

    useEffect(() => {
        try {
            const savedHabits = localStorage.getItem("habits");
            if (savedHabits) setHabits(JSON.parse(savedHabits));
            else {
                setHabits([
                    {
                        id: 1,
                        name: "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ (–¥–µ–º–æ)",
                        startDate: "2024-05-10",
                        durationInDays: 30,
                        completed: [],
                    },
                    {
                        id: 2,
                        name: "–ß–∏—Ç–∞—Ç—å 20 —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–µ–º–æ)",
                        startDate: getTodayString(),
                        durationInDays: 60,
                        completed: [],
                    },
                ]);
            }
        } catch (error) {
            console.error("Failed to load habits from localStorage", error);
        }
    }, []);

    useEffect(() => {
        if (isInitialLoad.current) {
            isInitialLoad.current = false;
            return;
        }
        try {
            localStorage.setItem("habits", JSON.stringify(habits));
        } catch (error) {
            console.error("Failed to save habits to localStorage", error);
        }
    }, [habits]);

    // –í–´–ß–ò–°–õ–ï–ù–ò–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–û–ì–û –°–ü–ò–°–ö–ê –° –ü–û–ú–û–©–¨–Æ useMemo
    const filteredHabits = useMemo(() => {
        return habits
            .filter((habit) => {
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if (filterStatus === "all") return true;

                const startDate = new Date(habit.startDate);
                const today = new Date();
                startDate.setHours(0, 0, 0, 0);
                today.setHours(0, 0, 0, 0);
                const timeDiff = today.getTime() - startDate.getTime();
                const daysPassed = Math.max(
                    0,
                    Math.ceil(timeDiff / (1000 * 60 * 60 * 24))
                );
                const isCompleted = daysPassed >= habit.durationInDays;

                if (filterStatus === "completed") return isCompleted;
                if (filterStatus === "active") return !isCompleted;
                return true;
            })
            .filter((habit) => {
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                return habit.name
                    .toLowerCase()
                    .includes(searchQuery.toLowerCase());
            });
    }, [habits, searchQuery, filterStatus]);

    const addHabit = (name: string, durationInDays: number) => {
        if (!name.trim() || durationInDays <= 0) return;
        const newHabit: Habit = {
            id: Date.now(),
            name,
            startDate: getTodayString(),
            durationInDays: Math.min(durationInDays, 365),
            completed: [],
        };
        setHabits((prevHabits) => [...prevHabits, newHabit]);

        toast.success("–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", {
            description: `–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "${name}". –£–¥–∞—á–∏!`,
        });
    };

    const deleteHabit = (habitId: number) => {
        // 1. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–µ –∏–º—è –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º
        const habitToDelete = habits.find((habit) => habit.id === habitId);

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–∏–≤—ã—á–∫—É
        setHabits((prevHabits) =>
            prevHabits.filter((habit) => habit.id !== habitId)
        );
        setVisibleMonths((prev) => {
            const newVisible = { ...prev };
            delete newVisible[habitId];
            return newVisible;
        });

        // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
        if (habitToDelete) {
            toast.info("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞", {
                description: `"${habitToDelete.name}" –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.`,
            });
        }
    };

    const toggleDayCompletion = (habitId: number, date: string) => {
        setHabits((prevHabits) => {
            const newHabits = prevHabits.map((habit) => {
                if (habit.id === habitId) {
                    const isAlreadyCompleted = habit.completed.includes(date);
                    const newCompletedArray = isAlreadyCompleted
                        ? habit.completed.filter((d) => d !== date)
                        : [...habit.completed, date];

                    if (!isAlreadyCompleted) {
                        // –ö–û–î –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–í–ï–†–®–ï–ù–ò–ò
                        // `if (true)`, —á—Ç–æ–±—ã –ª—é–±–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Å—á–∏—Ç–∞–ª–∞—Å—å
                        // if (true) {
                        if (newCompletedArray.length >= habit.durationInDays) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º >= –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                            onHabitComplete();
                            // <-- 3. –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ toast –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è -->
                            toast.success(
                                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéâ",
                                {
                                    description: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ "${habit.name}"!`,
                                    duration: 5000,
                                }
                            );
                        }
                    }

                    return { ...habit, completed: newCompletedArray };
                }
                return habit;
            });
            return newHabits;
        });
    };

    const showMore = (habitId: number) => {
        setVisibleMonths((prev) => ({
            ...prev,
            [habitId]: (prev[habitId] || 1) + 1,
        }));
    };

    const collapseHabit = (habitId: number) => {
        setVisibleMonths((prev) => ({ ...prev, [habitId]: 1 }));
    };

    return {
        habits,
        filteredHabits,
        visibleMonths,
        searchQuery,
        setSearchQuery,
        filterStatus,
        setFilterStatus,
        addHabit,
        deleteHabit,
        toggleDayCompletion,
        showMore,
        collapseHabit,
    };
}
